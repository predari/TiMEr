#SConstruct file for the KarMa_sequential
#
#scons variant=${variant} program=${program}
import os
import platform
import sys

# Get the current platform.
SYSTEM = platform.uname()[0]
HOST = platform.uname()[1]

# Get shortcut to $HOME.
HOME = os.environ['HOME']

quargs_files=['./app/quargs.cpp']

graph_info_files=['./app/graph_info.cpp']

part_info_files=['./app/partition_info.cpp',
	         './lib/tools/extended_quality_metrics.cpp'
]

part_files=['./app/partScenario.cpp',
            './lib/build_app_graph.cpp'
]

repart_files=['./app/repartScenario.cpp',
              './lib/repartitioning/diffusive_refinement.cpp',
              './lib/repartitioning/diffusive_uncoarsening.cpp',
              './lib/repartitioning/flow_based_balancer.cpp',
              './lib/repartitioning/graph_partitioner_m.cpp',
              './lib/repartitioning/graph_repartitioner.cpp',
              './lib/repartitioning/heap.cpp',
	      './lib/build_app_graph.cpp'
]

map_files=['./app/mapScenario.cpp',
           './lib/mapping/errors.cpp',
           './lib/mapping/build_processor_graphs.cpp',
           './lib/mapping/mapping_algorithms.cpp',
           './lib/mapping/processor_graph.cpp',
	   './lib/build_app_graph.cpp',
	   './lib/mapping/alma/graph/graph.cpp',
	   './lib/mapping/alma/hierarchy/hierarchy.cpp',
	   './lib/mapping/alma/permutation/permutation.cpp',
	   './lib/mapping/alma/utils/arith.cpp'
]

# maria
map_time_files=['./app/mapScenarioTiME.cpp',
           './lib/mapping/errors.cpp',
           './lib/mapping/build_processor_graphs.cpp',
           './lib/mapping/mapping_algorithms.cpp',
           './lib/mapping/processor_graph.cpp',
	   './lib/build_app_graph.cpp',
	   './lib/mapping/alma/graph/graph.cpp',
	   './lib/mapping/alma/hierarchy/hierarchy.cpp',
	   './lib/mapping/alma/permutation/permutation.cpp',
	   './lib/mapping/alma/utils/arith.cpp'
]
# maria
comm_files=['./app/makeCommGraphs.cpp',
           './lib/mapping/errors.cpp',
           './lib/mapping/build_processor_graphs.cpp',
           './lib/mapping/mapping_algorithms.cpp',
	   './lib/build_app_graph.cpp',
	   './lib/mapping/alma/permutation/permutation.cpp',
	   './lib/mapping/alma/utils/arith.cpp'
]

def GetEnvironment():
  """Get environment variables from command line and environment.

  Exits on errors.

  Returns
    Environment with the configuration from the command line.
  """
  opts = Variables()
  opts.Add('variant', 'the variant to build, optimized or optimized with output', 'optimized')
  opts.Add('program', 'program or interface to compile', 'quargs')

  env = Environment(options=opts,ENV = os.environ)
  if not env['variant'] in ['optimized','debug']:
     print 'Illegal value for variant: %s' % env['variant']
     sys.exit(1)

  if not env['program'] in ['quargs', 'graph_info', 'partition_info', 'partScenario', 'repartScenario', 'mapScenario', 'mapScenarioTiME', 'makeCommGraphs']:
     print 'Illegal value for program: %s' % env['program']
     sys.exit(1)

  # Special configuration for 64 bit machines.
  if platform.architecture()[0] == '64bit':
     env.Append(CPPFLAGS=['-DPOINTER64=1'])

  return env

# Get the common environment.
env = GetEnvironment()

env.Append(CPPPATH=['/usr/include/openmpi/'])
env.Append(CXXFLAGS = '-fopenmp')
env.Append(CXXFLAGS = '-g')

env.Append(CPPPATH=['./KaHIPv0.62/extern/argtable-2.10/include'])
env.Append(CPPPATH=['./KaHIPv0.62/app'])
env.Append(CPPPATH=['./KaHIPv0.62/lib'])
env.Append(CPPPATH=['./KaHIPv0.62/lib/tools'])
env.Append(CPPPATH=['./KaHIPv0.62/lib/partition'])
env.Append(CPPPATH=['./KaHIPv0.62/lib/partition/uncoarsening'])
env.Append(CPPPATH=['./KaHIPv0.62/lib/io'])
env.Append(CPPPATH=['./KaHIPv0.62/lib/partition/uncoarsening/refinement/quotient_graph_refinement/flow_refinement/'])
# maria env.Append(LIBPATH=['./KaHIPv0.62/extern/argtable-2.10/lib'])

env.Append(CPPPATH=['../KaHIPv0.62/extern/argtable-2.10/include'])
env.Append(CPPPATH=['../KaHIPv0.62/app'])
env.Append(CPPPATH=['../KaHIPv0.62/lib'])
env.Append(CPPPATH=['../KaHIPv0.62/lib/tools'])
env.Append(CPPPATH=['../KaHIPv0.62/lib/partition'])
env.Append(CPPPATH=['../KaHIPv0.62/lib/partition/uncoarsening'])
env.Append(CPPPATH=['../KaHIPv0.62/lib/io'])
env.Append(CPPPATH=['../KaHIPv0.62/lib/partition/uncoarsening/refinement/quotient_graph_refinement/flow_refinement/'])
# maria env.Append(LIBPATH=['../KaHIPv0.62/extern/argtable-2.10/lib'])
env.Append(LIBPATH=['/opt/local/lib/'])


if env['variant'] == 'optimized':
  env.Append(CXXFLAGS = '-DNDEBUG -Wall -funroll-loops  -fno-stack-limit -O3 -std=c++0x')
  env.Append(CCFLAGS  = '-O3  -DNDEBUG -funroll-loops -std=c++0x')
elif env['variant'] == 'debug':
  # A little bit more output on the console
  env.Append(CXXFLAGS = ' -g -funroll-loops -Wall -fno-stack-limit -std=c++0x')
  env.Append(CCFLAGS  = ' -g -DKAFFPAOUTPUT -std=c++0x')

env['CXX'] = 'mpic++'

env.Append(LIBPATH = ['./KaHIPv0.62/deploy/'])
# maria Env(LIBPATH = ['../KaHIPv0.62/deploy/'])

env.Append(LIBS = ['libkahip','gomp','libargtable2'])

if env['program'] == 'quargs':
        env.Append(CXXFLAGS = '-DMODE_REPART')
        env.Append(CCFLAGS  = '-DMODE_REPART')
	env.Program(target='./bin/quargs', source=quargs_files)

if env['program'] == 'graph_info':
        env.Append(CXXFLAGS = '-DMODE_GRAPH_INFO')
        env.Append(CCFLAGS  = '-DMODE_GRAPH_INFO')
	env.Program(target='./bin/graph_info', source=graph_info_files)

if env['program'] == 'partition_info':
        env.Append(CXXFLAGS = '-DMODE_PARTITION_INFO')
        env.Append(CCFLAGS  = '-DMODE_PARTITION_INFO')
	env.Program(target='./bin/partition_info', source=part_info_files)

elif env['program'] == 'partScenario':
        env.Append(CXXFLAGS = '-DMODE_PART')
        env.Append(CCFLAGS  = '-DMODE_PART')
	env.Program(target='./bin/partScenario', source=part_files)

elif env['program'] == 'repartScenario':
        env.Append(CXXFLAGS = '-DMODE_REPART')
        env.Append(CCFLAGS  = '-DMODE_REPART')
	env.Program(target='./bin/repartScenario', source=repart_files)

elif env['program'] == 'mapScenario':
        env.Append(CXXFLAGS = '-DMODE_MAP')
        env.Append(CCFLAGS  = '-DMODE_MAP')
	env.Program(target='./bin/mapScenario', source=map_files)
# maria
elif env['program'] == 'mapScenarioTiME':
        env.Append(CXXFLAGS = '-DMODE_MAP')
        env.Append(CCFLAGS  = '-DMODE_MAP')
	env.Program(target='./bin/mapScenarioTiME', source=map_time_files)
# maria
elif env['program'] == 'makeCommGraphs':
        env.Append(CXXFLAGS = '-DMODE_MAP')
        env.Append(CCFLAGS  = '-DMODE_MAP')
	env.Program(target='./bin/makeCommGraphs', source=comm_files)
